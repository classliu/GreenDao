package com.classliu.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.classliu.greendao.bean.TestData4;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEST_DATA4".
*/
public class TestData4Dao extends AbstractDao<TestData4, Long> {

    public static final String TABLENAME = "TEST_DATA4";

    /**
     * Properties of entity TestData4.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Reader = new Property(1, String.class, "reader", false, "READER");
        public final static Property ReaderString = new Property(2, String.class, "readerString", false, "READER_STRING");
        public final static Property TestInt = new Property(3, Integer.class, "testInt", false, "TEST_INT");
        public final static Property TestBoolean = new Property(4, Boolean.class, "testBoolean", false, "TEST_BOOLEAN");
    }


    public TestData4Dao(DaoConfig config) {
        super(config);
    }
    
    public TestData4Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEST_DATA4\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"READER\" TEXT," + // 1: reader
                "\"READER_STRING\" TEXT," + // 2: readerString
                "\"TEST_INT\" INTEGER," + // 3: testInt
                "\"TEST_BOOLEAN\" INTEGER);"); // 4: testBoolean
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST_DATA4\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TestData4 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String reader = entity.getReader();
        if (reader != null) {
            stmt.bindString(2, reader);
        }
 
        String readerString = entity.getReaderString();
        if (readerString != null) {
            stmt.bindString(3, readerString);
        }
 
        Integer testInt = entity.getTestInt();
        if (testInt != null) {
            stmt.bindLong(4, testInt);
        }
 
        Boolean testBoolean = entity.getTestBoolean();
        if (testBoolean != null) {
            stmt.bindLong(5, testBoolean ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TestData4 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String reader = entity.getReader();
        if (reader != null) {
            stmt.bindString(2, reader);
        }
 
        String readerString = entity.getReaderString();
        if (readerString != null) {
            stmt.bindString(3, readerString);
        }
 
        Integer testInt = entity.getTestInt();
        if (testInt != null) {
            stmt.bindLong(4, testInt);
        }
 
        Boolean testBoolean = entity.getTestBoolean();
        if (testBoolean != null) {
            stmt.bindLong(5, testBoolean ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TestData4 readEntity(Cursor cursor, int offset) {
        TestData4 entity = new TestData4( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // reader
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // readerString
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // testInt
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // testBoolean
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TestData4 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setReader(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReaderString(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTestInt(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setTestBoolean(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TestData4 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TestData4 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TestData4 entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.classliu.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.classliu.bean.UserData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_DATA.
*/
public class UserDataDao extends AbstractDao<UserData, Long> {

    public static final String TABLENAME = "USER_DATA";

    /**
     * Properties of entity UserData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property USERID = new Property(1, Integer.class, "USERID", false, "USERID");
        public final static Property BOOKID = new Property(2, Integer.class, "BOOKID", false, "BOOKID");
        public final static Property DOWNLOADTIME = new Property(3, Long.class, "DOWNLOADTIME", false, "DOWNLOADTIME");
        public final static Property DOWNLOADSIZES = new Property(4, Long.class, "DOWNLOADSIZES", false, "DOWNLOADSIZES");
        public final static Property OPENTIMES = new Property(5, Integer.class, "OPENTIMES", false, "OPENTIMES");
    };

    private DaoSession daoSession;


    public UserDataDao(DaoConfig config) {
        super(config);
    }
    
    public UserDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_DATA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USERID' INTEGER," + // 1: USERID
                "'BOOKID' INTEGER," + // 2: BOOKID
                "'DOWNLOADTIME' INTEGER," + // 3: DOWNLOADTIME
                "'DOWNLOADSIZES' INTEGER," + // 4: DOWNLOADSIZES
                "'OPENTIMES' INTEGER);"); // 5: OPENTIMES
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_DATA'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer USERID = entity.getUSERID();
        if (USERID != null) {
            stmt.bindLong(2, USERID);
        }
 
        Integer BOOKID = entity.getBOOKID();
        if (BOOKID != null) {
            stmt.bindLong(3, BOOKID);
        }
 
        Long DOWNLOADTIME = entity.getDOWNLOADTIME();
        if (DOWNLOADTIME != null) {
            stmt.bindLong(4, DOWNLOADTIME);
        }
 
        Long DOWNLOADSIZES = entity.getDOWNLOADSIZES();
        if (DOWNLOADSIZES != null) {
            stmt.bindLong(5, DOWNLOADSIZES);
        }
 
        Integer OPENTIMES = entity.getOPENTIMES();
        if (OPENTIMES != null) {
            stmt.bindLong(6, OPENTIMES);
        }
    }

    @Override
    protected void attachEntity(UserData entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserData readEntity(Cursor cursor, int offset) {
        UserData entity = new UserData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // USERID
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // BOOKID
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // DOWNLOADTIME
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // DOWNLOADSIZES
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // OPENTIMES
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUSERID(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setBOOKID(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDOWNLOADTIME(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setDOWNLOADSIZES(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setOPENTIMES(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

package com.classliu.bean;

import com.classliu.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.classliu.dao.UserDataDao;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table USER_DATA.
 */
public class UserData {

    private Long id;
    private Integer USERID;
    private Integer BOOKID;
    private Long DOWNLOADTIME;
    private Long DOWNLOADSIZES;
    private Integer OPENTIMES;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDataDao myDao;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public UserData() {
    }

    public UserData(Long id) {
        this.id = id;
    }

    public UserData(Long id, Integer USERID, Integer BOOKID, Long DOWNLOADTIME, Long DOWNLOADSIZES, Integer OPENTIMES) {
        this.id = id;
        this.USERID = USERID;
        this.BOOKID = BOOKID;
        this.DOWNLOADTIME = DOWNLOADTIME;
        this.DOWNLOADSIZES = DOWNLOADSIZES;
        this.OPENTIMES = OPENTIMES;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDataDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getUSERID() {
        return USERID;
    }

    public void setUSERID(Integer USERID) {
        this.USERID = USERID;
    }

    public Integer getBOOKID() {
        return BOOKID;
    }

    public void setBOOKID(Integer BOOKID) {
        this.BOOKID = BOOKID;
    }

    public Long getDOWNLOADTIME() {
        return DOWNLOADTIME;
    }

    public void setDOWNLOADTIME(Long DOWNLOADTIME) {
        this.DOWNLOADTIME = DOWNLOADTIME;
    }

    public Long getDOWNLOADSIZES() {
        return DOWNLOADSIZES;
    }

    public void setDOWNLOADSIZES(Long DOWNLOADSIZES) {
        this.DOWNLOADSIZES = DOWNLOADSIZES;
    }

    public Integer getOPENTIMES() {
        return OPENTIMES;
    }

    public void setOPENTIMES(Integer OPENTIMES) {
        this.OPENTIMES = OPENTIMES;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
